# build with the following command
# sudo docker build -f Dockerfile_paramak_with_neutronics -t paramak_with_neutronics .

# Run with the following command
# sudo docker run -it paramak_with_neutronics


FROM ubuntu:18.04

# Updating Ubuntu packages
RUN apt-get update && yes|apt-get upgrade

# Adding wget and bzip2
RUN apt-get install -y wget bzip2

# Anaconda installing
RUN wget https://repo.continuum.io/archive/Anaconda3-2020.02-Linux-x86_64.sh

RUN bash Anaconda3-2020.02-Linux-x86_64.sh -b

RUN rm Anaconda3-2020.02-Linux-x86_64.sh

# Set path to conda
ENV PATH /root/anaconda3/bin:$PATH

RUN conda install -c conda-forge -c cadquery cadquery=2

RUN apt-get update
RUN apt-get install -y libgl1-mesa-dev 
RUN apt-get install -y libglu1-mesa-dev
RUN apt-get install -y freeglut3-dev
RUN apt-get install -y libosmesa6
RUN apt-get install -y libosmesa6-dev
RUN apt-get install -y libgles2-mesa-dev


# the following commands are needed for pymoab installation

RUN apt-get --yes install mpich
RUN apt-get --yes install libmpich-dev
RUN apt-get --yes install libhdf5-serial-dev
RUN apt-get --yes install libhdf5-mpich-dev
RUN apt-get --yes install libblas-dev
RUN apt-get --yes install liblapack-dev

# needed to allow NETCDF on MOAB which helps with tet meshes in OpenMC
RUN apt-get --yes install libnetcdf-dev
# RUN apt-get --yes install libnetcdf13
# eigen3 needed for DAGMC
RUN apt-get --yes install libeigen3-dev

RUN apt-get -y install sudo #  needed as the install NJOY script has a sudo make install command
RUN apt-get -y install git

# dependancies used in the workshop
RUN apt-get --yes install imagemagick
RUN apt-get --yes install hdf5-tools
RUN apt-get --yes install wget

# MOAB Variables
ENV MOAB_BRANCH='Version5.1.0'
ENV MOAB_REPO='https://bitbucket.org/fathomteam/moab/'
ENV MOAB_INSTALL_DIR=$HOME/MOAB/


# MOAB download
RUN cd $HOME && \
    mkdir MOAB && \
    cd MOAB && \
    git clone -b $MOAB_BRANCH $MOAB_REPO

RUN pip install h5py
RUN pip install cython
RUN pip install cmake
RUN apt-get --yes install cmake

RUN cd $HOME && \
    cd MOAB && \
    mkdir build && cd build && \
    cmake ../moab -DENABLE_HDF5=ON -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=$MOAB_INSTALL_DIR -DENABLE_PYMOAB=ON && \
    # cmake ../moab -DENABLE_HDF5=ON -DENABLE_MPI=off -DENABLE_NETCDF=ON -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=$MOAB_INSTALL_DIR && \
    make -j8 &&  \
    make -j8 install  && \
    cmake ../moab -DBUILD_SHARED_LIBS=ON && \
    make -j8 install && \
    # rm -rf $HOME/MOAB/moab $HOME/MOAB/build && \
    cd pymoab && \
    bash install.sh && \
    python setup.py install


# DAGMC Variables
ENV DAGMC_BRANCH='develop'
ENV DAGMC_REPO='https://github.com/svalinn/dagmc'
ENV DAGMC_INSTALL_DIR=$HOME/DAGMC/


# DAGMC Install
RUN cd $HOME && \
    mkdir DAGMC && cd DAGMC && \
    git clone -b $DAGMC_BRANCH $DAGMC_REPO && \
    mkdir build && \
    cd build && \
    cmake ../dagmc -DBUILD_TALLY=ON -DCMAKE_INSTALL_PREFIX=$DAGMC_INSTALL_DIR -DMOAB_DIR=$MOAB_INSTALL_DIR && \
    make -j8 install && \
    rm -rf $HOME/DAGMC/dagmc $HOME/DAGMC/build


# check if this is still neeeded
RUN pip install --upgrade numpy

# /opt folder is owned by root
USER root

# installs OpenMc from source
RUN cd /opt &&  git clone https://github.com/openmc-dev/openmc.git
RUN cd /opt/openmc && git checkout develop
RUN cd /opt/openmc && mkdir build
RUN cd /opt/openmc/build && cmake -Ddagmc=ON -DDAGMC_ROOT=$DAGMC_INSTALL_DIR -DHDF5_PREFER_PARALLEL=OFF ..
RUN cd /opt/openmc/build && make -j8 
RUN cd /opt/openmc/build && make install 
RUN cd /opt/openmc/ && python setup.py install


# Clone and install NJOY2016
RUN git clone https://github.com/njoy/NJOY2016
RUN cd NJOY2016 && mkdir build
RUN cd NJOY2016/build/ && cmake -Dstatic=on .. 
RUN cd NJOY2016/build/ && make 2>/dev/null
RUN cd NJOY2016/build/ && sudo make install

ENV OPENMC_CROSS_SECTIONS=$HOME/nndc_hdf5/cross_sections.xml
ENV LD_LIBRARY_PATH=$HOME/MOAB/lib:$HOME/DAGMC/lib
ENV PATH=$PATH:$HOME/NJOY2016/build


# install endf nuclear data

# clone data repository
RUN git clone https://github.com/openmc-dev/data.git

# run script that converts ACE data to hdf5 data
RUN python3 data/convert_nndc71.py --cleanup


RUN git clone https://github.com/open-radiation-sources/parametric-plasma-source.git
RUN cd parametric-plasma-source && pip install .

ENV OPENMC_CROSS_SECTIONS=/nndc-b7.1-hdf5/cross_sections.xml