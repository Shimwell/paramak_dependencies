# build with the following command
# sudo docker build -f Dockerfile_dependencies_with_neutronics -t paramak_dependencies_with_neutronics .

# Run with the following command
# sudo docker run -it paramak_dependencies_with_neutronics


FROM ubuntu:18.04
ENV DEBIAN_FRONTEND=noninteractive

# Updating Ubuntu packages
RUN apt-get update && yes|apt-get upgrade

# Adding wget and bzip2
RUN apt-get install -y wget bzip2

# Anaconda installing
RUN wget https://repo.anaconda.com/miniconda/Miniconda3-py37_4.8.3-Linux-x86_64.sh
RUN bash Miniconda3-py37_4.8.3-Linux-x86_64.sh -b
RUN rm Miniconda3-py37_4.8.3-Linux-x86_64.sh

ENV PATH /root/miniconda3/bin:$PATH

RUN conda install -c conda-forge -c cadquery cadquery=2
RUN conda install gxx_linux-64


RUN apt-get update
RUN apt-get install -y libgl1-mesa-dev \
                       libglu1-mesa-dev \
                       freeglut3-dev \
                       libosmesa6 \
                       libosmesa6-dev \
                       libgles2-mesa-dev


# the following commands are needed for pymoab installation
RUN apt-get --yes install mpich \
                          libmpich-dev \
                          libhdf5-serial-dev \
                          libhdf5-mpich-dev \
                          libblas-dev \
                          liblapack-dev

# needed to allow NETCDF on MOAB which helps with tet meshes in OpenMC
# RUN apt-get --yes install libnetcdf-dev
# RUN apt-get --yes install libnetcdf13
# eigen3 needed for DAGMC
RUN apt-get --yes install libeigen3-dev

# sudo is needed as the install NJOY script has a sudo make install command
RUN apt-get --yes install sudo \
                          git \
                          hdf5-tools

# RUN apt-get --yes install imagemagick


# needed for occ faceter
RUN apt --yes install libhdf5-dev \
                      build-essential \
                      gfortran \
                      autoconf \
                      libtool \
                      liblapack-dev \
                      libcgal-dev \
                      libtbb-dev

RUN apt-get update
RUN apt-get --yes install software-properties-common
# needed for occ faceter
RUN add-apt-repository --yes ppa:freecad-maintainers/freecad-stable
RUN apt update
RUN apt-get install --yes libocct*-dev occt*


# needed for ppp
RUN add-apt-repository --yes ppa:freecad-maintainers/freecad-stable
RUN apt update
RUN apt-get install --yes freecad \
                          libtbb2 \
                          libocct-foundation-7.3 \
                          libocct-data-exchange-7.3 \
                          libocct-modeling-data-7.3 \
                          libocct-modeling-algorithms-7.3 \
                          libocct-ocaf-7.3

RUN pip install --upgrade numpy
RUN pip install h5py
RUN pip install cython
RUN pip install cmake
RUN apt-get --yes install cmake

ENV LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/hdf5/serial:$LD_LIBRARY_PATH

RUN wget https://github.com/ukaea/parallel-preprocessor/releases/download/dev/parallel-preprocessor-0.3-dev_ubuntu-18.04.deb
RUN dpkg -i parallel-preprocessor-0.3-dev_ubuntu-18.04.deb

# MOAB Variables
ENV MOAB_BRANCH='Version5.1.0'
ENV MOAB_REPO='https://bitbucket.org/fathomteam/moab/'
ENV MOAB_INSTALL_DIR=$HOME/MOAB

# MOAB install
RUN cd $HOME && \
    mkdir MOAB && \
    cd MOAB && \
    git clone -b $MOAB_BRANCH $MOAB_REPO && \
    mkdir build && cd build && \
    cmake ../moab -DENABLE_HDF5=ON -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=$MOAB_INSTALL_DIR -DENABLE_PYMOAB=ON && \
    make -j &&  \
    make -j install  && \
    cmake ../moab -DBUILD_SHARED_LIBS=ON && \
    make -j install && \
    cd pymoab && \
    bash install.sh && \
    python setup.py install && \
    rm -rf $HOME/MOAB/moab $HOME/MOAB/build

ENV LD_LIBRARY_PATH=$MOAB_INSTALL_DIR/lib:$LD_LIBRARY_PATH

RUN git clone https://github.com/makeclean/occ_faceter.git
RUN cd occ_faceter && \
    mkdir build && \
    cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=..  && \
    make -j  && \
    make install
ENV PATH=$PATH:$HOME/occ_faceter/bin

# DAGMC Variables
ENV DAGMC_INSTALL_DIR=$HOME/DAGMC/

# DAGMC Install
RUN cd $HOME && \
    mkdir DAGMC && \
    cd DAGMC && \
    git clone -b develop https://github.com/svalinn/dagmc && \
    mkdir build && \
    cd build && \
    cmake ../dagmc -DBUILD_TALLY=ON -DCMAKE_INSTALL_PREFIX=$DAGMC_INSTALL_DIR -DMOAB_DIR=$MOAB_INSTALL_DIR -DBUILD_STATIC_LIBS=OFF -DBUILD_STATIC_EXE=OFF && \
    make -j install && \
    rm -rf $HOME/DAGMC/dagmc $HOME/DAGMC/build

ENV PATH=$PATH:$HOME/DAGMC/bin

# /opt folder is owned by root
USER root

# installs OpenMc from source
RUN cd /opt && \
    git clone https://github.com/openmc-dev/openmc.git  && \
    cd openmc && \
    git checkout develop  && \
    mkdir build  && \
    cd build && \
    cmake -Ddagmc=ON -DDAGMC_ROOT=$DAGMC_INSTALL_DIR -DHDF5_PREFER_PARALLEL=OFF .. && \
    make -j && \
    make install && \
    cd /opt/openmc/ && pip install .

# install NJOY2016
RUN git clone https://github.com/njoy/NJOY2016 && \
    cd NJOY2016 && \
    mkdir build && \
    cd build && \
    cmake -Dstatic=on .. && \
    make 2>/dev/null && \
    sudo make install

ENV OPENMC_CROSS_SECTIONS=$HOME/nndc_hdf5/cross_sections.xml
ENV LD_LIBRARY_PATH=$HOME/MOAB/lib:$HOME/DAGMC/lib
ENV PATH=$PATH:$HOME/NJOY2016/build

RUN git clone https://github.com/open-radiation-sources/parametric-plasma-source.git
RUN cd parametric-plasma-source && pip install .

ENV OPENMC_CROSS_SECTIONS=/nndc-b7.1-hdf5/cross_sections.xml

# install nuclear data

# clone data repository
RUN git clone https://github.com/openmc-dev/data.git

# run script that converts ACE data to hdf5 data
RUN python3 data/convert_nndc71.py --cleanup
# RUN python3 data/convert_tendl.py --cleanup
# RUN data/combine_libraries.py -l nndc-b7.1-hdf5/cross_sections.xml tendl-2019-hdf5/cross_sections.xml
# ENV OPENMC_CROSS_SECTIONS=/cross_sections.xml

ENV OPENMC_CROSS_SECTIONS=/nndc-b7.1-hdf5/cross_sections.xml
ENV LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/hdf5/serial:$LD_LIBRARY_PATH

RUN ln /usr/lib/x86_64-linux-gnu/hdf5/serial/libhdf5.so /usr/lib/x86_64-linux-gnu/hdf5/serial/libhdf5.so.103
RUN ln /usr/lib/x86_64-linux-gnu/hdf5/serial/libhdf5.so /usr/lib/x86_64-linux-gnu/hdf5/serial/libhdf5.so.100

# RUN rm tendl-2019-ace
# RUN rm tendl-2019-download
RUN rm -rf nndc-b7.1-ace
RUN rm -rf nndc-b7.1-download
RUN rm -rf nndc-b7.1-endf


# RUN git clone https://github.com/ukaea/paramak.git && \
#    cd paramak && \
#    git checkout develop && \
#    pip install -e .

# WORKDIR paramak/examples/example_neutronics_simulations
