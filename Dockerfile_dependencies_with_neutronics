# This dockerfile can be built in a few different ways.
# Docker build commands must be run from within the base repository directory
#
# There are build args availalbe for specifying the:
# - cq_version
#   The version of CadQuery to use master or 2. 
#   Default is 2.
#   Options: [master, 2]
#
# - compile_cores
#   The number of CPU cores to compile the image with.
#   Default is 1.
#   Options: [1, 2, 3, 4, 5, 6...]
#
# Example builds:
# Building using the defaults (cq_version 2, no neutronics and 1 core compile)
# docker build-f Dockerfile_dependencies_with_neutronics -t openmcworkshop/paramak_dependencies_with_cqm_neutronics .
#
# run with the following command
# docker run -it openmcworkshop/paramak_dependencies_with_cqm_neutronics
#
# Once built, the docker image can be tested with either of the following commands
# docker run --rm ukaea/paramak pytest /tests
# docker run --rm ukaea/paramak  /bin/bash -c "cd .. && bash run_tests.sh"

FROM continuumio/miniconda3

# By default this Dockerfile builds with the latest release of CadQuery 2
ARG cq_version=master
ARG compile_cores=2

ENV LANG=C.UTF-8 LC_ALL=C.UTF-8 \
    PATH=/opt/openmc/bin:/opt/NJOY2016/build:$PATH \
    LD_LIBRARY_PATH=/opt/openmc/lib:$LD_LIBRARY_PATH \
    CC=/usr/bin/mpicc CXX=/usr/bin/mpicxx \
    DEBIAN_FRONTEND=noninteractive

RUN apt-get update -y && \
    apt-get upgrade -y

RUN apt-get install -y libgl1-mesa-glx libgl1-mesa-dev libglu1-mesa-dev \
                       freeglut3-dev libosmesa6 libosmesa6-dev \
                       libgles2-mesa-dev && \
                       apt-get clean

# Installing CadQuery
# jupyter is installed before cadquery to avoid a conflict
RUN conda install jupyter -y --quiet && \
    conda install -c cadquery -c conda-forge cadquery="$cq_version" && \
    conda clean -afy

# Install neutronics dependencies from Debian package manager
RUN apt-get install -y \
    wget git gfortran g++ cmake \
    mpich libmpich-dev libhdf5-serial-dev libhdf5-mpich-dev \
    imagemagick

# install addition packages required for MOAB
RUN apt-get --yes install libeigen3-dev && \
    apt-get --yes install libblas-dev && \
    apt-get --yes install liblapack-dev && \
    apt-get --yes install libnetcdf-dev && \
    apt-get --yes install libtbb-dev && \
    apt-get --yes install libglfw3-dev

# Clone and install NJOY2016
RUN git clone https://github.com/njoy/NJOY2016 /opt/NJOY2016 && \
    cd /opt/NJOY2016 && \
    mkdir build && cd build && \
    cmake -Dstatic=on .. && make 2>/dev/null && make install

# Clone and install Embree
RUN git clone https://github.com/embree/embree && \
    cd embree && \
    mkdir build && \
    cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=.. \
        -DEMBREE_ISPC_SUPPORT=OFF && \
    make -j"$compile_cores" && \
    make -j"$compile_cores" install && \

# Clone and install MOAB
RUN pip install --upgrade numpy cython && \
    mkdir MOAB && \
    cd MOAB && \
    mkdir build && \
    git clone  --single-branch --branch develop https://bitbucket.org/fathomteam/moab/ && \
    cd build && \
    cmake ../moab -DENABLE_HDF5=ON \
                -DENABLE_NETCDF=ON \
                -DBUILD_SHARED_LIBS=OFF \
                -DENABLE_FORTRAN=OFF \
                -DCMAKE_INSTALL_PREFIX=/MOAB && \
    make -j"$compile_cores" && \
    make -j"$compile_cores" install && \
    rm -rf * && \
    cmake ../moab -DBUILD_SHARED_LIBS=ON \
                -DENABLE_HDF5=ON \
                -DENABLE_PYMOAB=ON \
                -DENABLE_BLASLAPACK=OFF \
                -DENABLE_FORTRAN=OFF \
                -DCMAKE_INSTALL_PREFIX=/MOAB && \
    make -j"$compile_cores" && \
    make -j"$compile_cores" install && \
    cd pymoab && \
    bash install.sh && \
    python setup.py install


# Clone and install Double-Down
RUN git clone https://github.com/pshriwise/double-down && \
    cd double-down && \
    mkdir build && \
    cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=.. \
        -DMOAB_DIR=/MOAB \
        -DEMBREE_DIR=/embree/lib/cmake/embree-3.12.1 \
        -DEMBREE_ROOT=/embree/lib/cmake/embree-3.12.1 && \
    make -j"$compile_cores" && \
    make -j"$compile_cores" install

# Clone and install DAGMC
RUN mkdir DAGMC && \
    cd DAGMC && \
    git clone -b develop https://github.com/svalinn/dagmc && \
    mkdir build && \
    cd build && \
    cmake ../dagmc -DBUILD_TALLY=ON \
        -DCMAKE_INSTALL_PREFIX=/dagmc/ \
        -DMOAB_DIR=/MOAB \
        -DBUILD_STATIC_LIBS=OFF \
        -DBUILD_STATIC_EXE=OFF && \
    make -j"$compile_cores" install && \
    rm -rf /DAGMC/dagmc /DAGMC/build

# Clone and install OpenMC with DAGMC
RUN git clone --recurse-submodules https://github.com/openmc-dev/openmc.git /opt/openmc && \
    cd /opt/openmc && \
    mkdir build && \
    cd build && \
    cmake -Doptimize=on -Ddagmc=ON \
        -DDAGMC_DIR=/DAGMC/ \
        -DHDF5_PREFER_PARALLEL=on ..  && \
    make -j"$compile_cores" && \
    make -j"$compile_cores" install && \
    cd ..  && \
    pip install -e .[test]

RUN /opt/openmc/tools/ci/download-xs.sh

ENV OPENMC_CROSS_SECTIONS=nndc_hdf5/cross_sections.xml

# Copies over the Paramak code from the local repository

RUN pip install neutronics_material_maker && \
RUN pip install parametric_plasma_source && \


COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt


# Copy over the source code, examples and tests
COPY run_tests.sh run_tests.sh
COPY paramak paramak/
COPY examples examples/
COPY setup.py setup.py
COPY tests tests/
COPY README.md README.md

# using setup.py instead of pip due to https://github.com/pypa/pip/issues/5816
RUN python setup.py install

WORKDIR examples
